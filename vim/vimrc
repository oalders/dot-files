set encoding=utf-8
scriptencoding utf-8

source ~/.vim/vim-plug-vimrc

let g:mapleader = ','

syntax enable
set background=dark

colorscheme iceberg

" Ensure bg color for OceanicNext doesn't get clobbered
" https://stackoverflow.com/a/41587510/406224
highlight clear LineNr
highlight clear SignColumn

:nnoremap <leader>sv :source $MYVIMRC<cr>

" Display number of matches for a search, with index. eg: [2/5]
set shortmess-=S

" Don't clobber the Attention message that appears if two processes are trying
" to edit the same file.
set shortmess-=A

" https://superuser.com/questions/1255985/syntax-highlighting-breaks-off-on-vim-as-you-page-up-down-on-osx-terminal-and-i
map ,ss <esc>:syntax sync fromstart<CR>

set laststatus=2
set backspace=2
filetype on

set noswapfile

augroup fileops
    " reload files which have changed
    autocmd CursorHold * checktime
augroup END

" paste the same line multiple times without the content of the "yank" being replaced
" http://stackoverflow.com/questions/7163947/vim-paste-multiple-times
xnoremap p pgvy

let g:auto_save = 1  " enable AutoSave on Vim startup

let g:gitgutter_realtime = 0

let g:auto_save_no_updatetime = 1  " do not change the 'updatetime' option

let g:matchmaker_enable_startup = 1

" Don't override iTerm2's window transparency
highlight Normal ctermbg=none

" prevent delay when switching from insert to normal mode
" https://www.johnhawthorn.com/2012/09/vi-escape-delays/
set timeoutlen=1000 ttimeoutlen=1000

set autoread

" ensure long lines get full syntax highlighting
set synmaxcol=2000

" ########### Search ###########
"
" case insensitive search
set ignorecase smartcase

" highlight all matches
set hlsearch

hi Search ctermbg=LightYellow
hi Search ctermfg=Red

" lookahead as search pattern is specified
set incsearch

" ########### Indent ###########

filetype plugin indent on
set autoindent

" enable shift-tab for outdent
exe 'set t_kB=' . nr2char(27) . '[Z'

set softtabstop=4
set shiftwidth=4
set tabstop=4
set smarttab
" use spaces rather than tabs
set expandtab

" Indent using tabs (while in visual mode)
vnoremap < <gv
vnoremap > >gv

" make tab in v mode indent code
vmap <tab> >gv
vmap <s-tab> <gv

" make tab in normal mode indent code
nmap <tab> I<tab><esc>
nmap <s-tab> ^i<bs><esc>

:set list!
:set listchars=tab:\|.

" https://stackoverflow.com/a/69099888/406224
function! UseTabs()
    :set noexpandtab
    :set copyindent
    :set preserveindent
    :set softtabstop=0
    :set shiftwidth=4
    :set tabstop=4
    :set list
endfunction

" define a group `vimrc` and initialize.
augroup vimrc
  autocmd!

    " ########### Set File Types ###########
    "
    autocmd BufEnter .vim-plug-vimrc  :setlocal filetype=vim

    autocmd BufEnter ansible/hosts :setlocal filetype=dosini

    autocmd BufEnter *Dockerfile :setlocal filetype=dockerfile

    " syntax highlighting for some Perl utility rc files
    " autocmd BufEnter  cpanfile        :setlocal filetype=perl
    autocmd BufEnter  dataprinter     :setlocal filetype=dosini
    autocmd BufEnter .dataprinter     :setlocal filetype=dosini
    autocmd BufEnter  perlcriticrc    :setlocal filetype=dosini
    autocmd BufEnter .perlcriticrc    :setlocal filetype=dosini
    autocmd BufEnter .prettierrc      :setlocal filetype=json
    autocmd BufEnter .tidyallrc       :setlocal filetype=dosini
    autocmd BufEnter .yath.rc         :setlocal filetype=dosini
    autocmd BufEnter .yath.user.rc    :setlocal filetype=dosini

    autocmd BufRead,BufNewFile *.gohtml   set filetype=gohtmltmpl
    autocmd BufRead,BufNewFile *.html.ep  set filetype=html
    autocmd BufRead,BufNewFile *.html.epl set filetype=html
    autocmd BufRead,BufNewFile *.tmpl     set filetype=html

    autocmd BufRead,BufNewFile *.yml set filetype=yaml
    autocmd FileType yaml :setlocal sw=2 ts=2 sts=2

    autocmd BufRead,BufNewFile local_bashrc set filetype=sh

    autocmd BufRead,BufNewFile Changes      set filetype=txt
augroup END

" ########### SQL ###########

" prevent left and right arrows from being disabled in insert mode when
" editing SQL files
let g:omni_sql_no_default_maps = 1

" ########### Functions ###########
"
" Exec current file
nnoremap <Leader>e <Esc>:call ExecFile()<CR>

fun ExecFile()
    ":call setfperm(expand("%"), "rwxr-xr-x")
    :silent !chmod u+x %
    :!"%:p"
endfun

" Set line markers to make indentation easier to follow
" Enable via :call ShowLines()
fun ShowLines()
    :set colorcolumn=5,9,13,17,21,25,29,78
endfun

fun HideGutter()
    :GitGutterDisable
    :set nonumber
    :set nolist
    :set scl=no " sign column
    :set foldcolumn=0
endfun

fun! ShowGutter()
    :GitGutterEnable
    :set number
    :set list
    :set scl=auto
endfun

function! Requote()
    let l = 1
    for line in getline(1,'$')
        call setline(l, substitute(line, '[‚Äú‚Äù]', '"', 'g'))
        let l = l + 1
    endfor
endfunction

" ########### Mappings ###########
"
"
nnoremap <leader>xx :call setfperm(expand('%'),"rwxrw-rw-")<cr>
" Change hyphens to underscores
vnoremap <silent> uu :s/\%V\-/_/g<cr>

" Change underscores to hyphens
vnoremap <silent> hh :s/\%V_/-/g<cr>

" Change double quotes to single quotes
vnoremap <silent> '' :s/\%V"/'/g<cr>

" https://github.com/roxma/vim-hug-neovim-rpc/issues/28
set pyxversion=3
let g:python_host_prog = '/usr/bin/python2'
let g:python3_host_prog = '/usr/bin/python3'

" fzf
let g:fzf_preview_window = ['down:50%', 'ctrl-/', ]
nnoremap <leader>b :Buffers<cr>

"remove all trailing whitespace
:nnoremap <silent> - :StripWhitespace<CR>
:vnoremap <silent> - :StripWhitespace<CR>

"dictionary sort
:vnoremap <silent> so :!sort -d --ignore-case<CR>

"dictionary sort unique
:vnoremap <silent> su :!sort -d --ignore-case<bar> uniq<CR>

" CamelCaseMotion
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge

nmap <leader>h :YankHistoryRgPaste

" Format selected JSON via jq
" The dot is not required for jq version >= 1.6
vnoremap jq :!jq -S .<cr>

" Example without a preview window:
"command! GEmo
  "\ call fzf#run({'source': 'git diff -w -M origin/main...HEAD --name-only', 'sink': 'e'})

" belongs fzf.vim
" command! -bang GDomo
  " \ call fzf#run(
  " \   fzf#vim#with_preview(
  " \     fzf#wrap({ 'source': 'git domo' }, <bang>0)
  " \   )
  " \ )

" Show comments in italics
highlight Comment cterm=italic gui=italic term=bold
set t_ZH=[3m
set t_ZR=[23m

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" 'luochen1990/rainbow'
let g:rainbow_active = 1 "set to 0 if you want to enable it later via :RainbowToggle

" vim-slash plugin can force the cursor to blink when it first arrives at a
" match
if has('timers')
  " Blink 2 times with 50ms interval
  noremap <expr> <plug>(slash-after) slash#blink(2, 50)
endif

" insert a new uuid at cursor
let g:nuuid_no_mappings = 1
nnoremap <Leader>u <Plug>Nuuid

" Prevent a mouse selection from triggering visual mode
set mouse=v

" Use 2 spaces to indent GFM ToC
" https://github.com/mzlogin/vim-markdown-toc/issues/74
let g:vmt_list_indent_text = '  '
let g:vmt_auto_update_on_save = 1
