call plug#begin('~/.vim/plugged')

" On demand
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

Plug 'ajh17/VimCompletesMe'
Plug 'airblade/vim-gitgutter'
Plug 'altercation/vim-colors-solarized'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'avakhov/vim-yaml'
Plug 'bkad/CamelCaseMotion'
Plug 'bling/vim-airline'
Plug 'bronson/vim-trailing-whitespace'
Plug 'c9s/perlomni.vim'
Plug 'chrisbra/unicode.vim'
Plug 'fatih/vim-go'
Plug 'henrik/vim-indexed-search'
Plug 'jreybert/vimagit'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vader.vim'
Plug 'lukhio/vim-mapping-conflicts'
Plug 'mbra/prettysql' " ,fs to format visually selected SQL
Plug 'oalders/syntax-check-perl',  { 'branch': 'executable-and-options' }
Plug 'qstrahl/vim-matchmaker'
Plug 'rodjek/vim-puppet'
Plug 'rsrchboy/mojo.vim'
Plug 'ryanpcmcquen/fix-vim-pasting'
Plug 'scrooloose/nerdcommenter'
Plug 'sheerun/vim-polyglot'
"Plug 'skaji/syntax-check-perl'
"Plug 'SirVer/ultisnips'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/vim-json-bundle'
Plug 'w0rp/ale'
"Plug 'yko/mojo.vim'
Plug 'tpope/vim-sensible'

source ~/.local_vimrc

" Initialize plugin system
call plug#end()

let g:mapleader = ","

syntax enable
set background=dark
colorscheme solarized

" https://superuser.com/questions/1255985/syntax-highlighting-breaks-off-on-vim-as-you-page-up-down-on-osx-terminal-and-i
map ,ss <esc>:syntax sync fromstart<CR>

set laststatus=2
set backspace=2
filetype on
filetype plugin indent on

" case insensitive search
set ignorecase smartcase

" highlight all matches
set hlsearch

hi Search ctermbg=LightYellow
hi Search ctermfg=Red

" lookahead as search pattern is specified
set incsearch

" indents
set autoindent

" reload files which have changed
:autocmd CursorHold * checktime
set autoread

"remove all trailing whitespace
:nnoremap <silent> - :FixWhitespace<CR>
:vnoremap <silent> - :FixWhitespace<CR>

"dictionary sort
:vnoremap <silent> so :!sort -d --ignore-case<CR>

"dictionary sort unique
:vnoremap <silent> su :!sort -d --ignore-case<bar> uniq<CR>

"ws shortcut to sort lists of words and move to one line. requires tidying
"after the fact.
" http://stackoverflow.com/questions/1327978/sorting-words-not-lines-in-vim
:vnoremap <silent> ws :!perl -ne '$,=" ";print sort split /\s+/'<CR>

" enables shift-tab for outdent
exe 'set t_kB=' . nr2char(27) . '[Z'

" reflow text
nnoremap Q gqap
vnoremap Q gq

" highlight comments
highlight Comment term=bold ctermfg=white

"====[ Goto last location in non-empty files ]=======

autocmd BufReadPost *  if line("'\"") > 1 && line("'\"") <= line("$")
                   \|     exe "normal! g`\""
                   \|  endif

" paste the same line multiple times without the content of the "yank" being replaced
" http://stackoverflow.com/questions/7163947/vim-paste-multiple-times
xnoremap p pgvy

let g:auto_save = 1  " enable AutoSave on Vim startup

let g:gitgutter_realtime = 0

let g:auto_save_no_updatetime = 1  " do not change the 'updatetime' option

let g:matchmaker_enable_startup = 1

" Don't override iTerm2's window transparency
highlight Normal ctermbg=none

" prevent delay when switching from insert to normal mode
" https://www.johnhawthorn.com/2012/09/vi-escape-delays/
set timeoutlen=1000 ttimeoutlen=1000

" ########### tabs ###########

set softtabstop=4
set shiftwidth=4
set tabstop=4
set smarttab
" use spaces rather than tabs
set expandtab

" Indent using tabs (while in visual mode)
vnoremap < <gv
vnoremap > >gv
" make tab in v mode ident code
vmap <tab> >gv
vmap <s-tab> <gv
" make tab in normal mode ident code
nmap <tab> I<tab><esc>
nmap <s-tab> ^i<bs><esc>

:set list!
:set listchars=tab:\|.
" ########### TidyAll ###########

" https://github.com/jonswar/perl-code-tidyall/blob/master/etc/editors/tidyall.vim

" Run tidyall on the current buffer. If an error occurs, show it and leave it
" in tidyall.ERR, and undo any changes.

command! TidyAll :call TidyAll()
function! TidyAll()
    let l:cur_pos = getpos( '.' )
    let l:cmdline = ':1,$!tidyall --mode editor --pipe %:p 2> tidyall.ERR'
    execute( l:cmdline )
    if v:shell_error
        echo "\nContents of tidyall.ERR:\n\n" . system( 'cat tidyall.ERR' )
        silent undo
    else
        call system( 'rm tidyall.ERR' )
    endif
    call setpos( '.', cur_pos )
endfunction

" Bind to ,t (or leader+t)
map <leader>t :call TidyAll()<cr>

" ########### NERDTree ###########
map <F2> :NERDTreeToggle<CR>

map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge

" ########### Airline ###########
" Show open buffers at top.  Disabled by default, but leave this here so I
" don't forget about the setting.
let g:airline#extensions#tabline#enabled = 0

" ########### Ale ###########
" Show Ale warnings and messages in statusline
let g:airline#extensions#ale#enabled = 1

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" ########### Golang ###########
" Hide tabs and show numbers for Go files
autocmd FileType go setlocal nolist
autocmd FileType go set number

let g:go_auto_sameids = 1
let g:go_auto_type_info = 0
let g:go_fmt_command = "goimports"
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_generate_tags = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_types = 1
let g:go_fmt_fail_silently = 1 " Ale handles this already

" gometalinter currently not enabled
let g:ale_linters = {'go': ['gofmt', 'golint', 'go vet'], 'perl': ['syntax-check', 'perlcritic'] }

" https://github.com/skaji/syntax-check-perl#integrate-with-vim-plug-and-ale
let g:ale_perl_syntax_check_config = expand('~/dot-files/syntax-check-perl/config.pl')

autocmd FileType go nmap <leader>t  <Plug>(go-test)
autocmd FileType go nmap <leader>b  <Plug>(go-build)

" ########### All file Types ###########
"
" Exec current file
nnoremap <Leader>e <Esc>:!"%:p"<CR>

" ########### Perl ###########
"
" Run prove on current file
nnoremap <Leader>p <Esc>:!prove -It/lib -lv %<CR>

" show matching brackets
autocmd FileType perl set showmatch

" show line numbers
autocmd FileType perl set number


" https://stackoverflow.com/questions/2345519/how-can-i-script-vim-to-run-perltidy-on-a-buffer

"define :Tidy command to run perltidy on visual selection || entire buffer"
command -range=% -nargs=* PTidy <line1>,<line2>!perltidy -q

"run :PTidy on entire buffer and return cursor to (approximate) original position"
fun DoPerlTidy()
    let l:line = line(".")
    let l:column = col(".")
    :PTidy
    call cursor(l:line, l:column)
endfun

au Filetype perl vnoremap <silent> = :!perltidy -q<CR>

"shortcut for normal mode to run on entire buffer then return to current line"
au Filetype perl nnoremap = :call DoPerlTidy()<CR>

" show Perl::Critic rules which have been violated
let g:ale_perl_perlcritic_showrules = 1

let g:ale_type_map = {
\    'perlcritic': {'ES': 'WS', 'E': 'W'},
\}

autocmd BufReadPost *.pl   set keywordprg=perldoc\ -f

map ,mmi o__PACKAGE__->meta->make_immutable;<CR>1;<ESC>
map ,ddp ouse DDP;<CR>p( );<ESC>
map ,perl :set paste<CR>O#!/usr/bin/env perl;<CR><CR>use strict;<CR>use warnings;<CR>use feature qw( say );<CR><ESC>
map ,moose Opackage Foo::Bar;<CR><CR>use Moose;<CR><CR>use MooseX::StrictConstructor;<CR><CR>__PACKAGE__->meta->make_immutable;<CR>1;<ESC>
map ,se :set paste<CR>i    my $self = shift;<CR>

" convert a file path to a Perl module name
" ie Foo/Bar/Baz.pm => Foo::Bar::Baz
map ,2mod :s/\.pm//<CR>gv:s/\//::/g<CR>

" Treat Mojo templates (mostly) like HTML
autocmd FileType html.epl setlocal sw=2 ts=2 sts=2
autocmd FileType html.ep setlocal sw=2 ts=2 sts=2

" ########### SplitJoin ###########

let g:splitjoin_split_mapping = ''
let g:splitjoin_join_mapping = ''

nmap <Leader>j :SplitjoinJoin<cr>
nmap <Leader>s :SplitjoinSplit<cr>

" ########### JSON ###########

"pretty print json
map <leader>jt <Esc>:%!cpanel_json_xs -f json-relaxed -t json-pretty<CR>

" ########### Python ###########
autocmd FileType python nnoremap <leader>y :0,$!yapf<Cr><C-o>

" ########### SQL ###########
vnoremap <silent> + :!sql-webformat<CR>

" prevent left and right arrows from being disabled in insert mode when
" editing SQL files
let g:omni_sql_no_default_maps = 1

" ########### HTML ###########

" 4 space tabs in html get annoying
autocmd BufRead,BufNewFile *.tmpl set filetype=html
autocmd FileType html :setlocal sw=2 ts=2 sts=2 expandtab

" ########### YAML ###########

autocmd BufRead,BufNewFile *.yml set filetype=yaml
autocmd FileType yaml :setlocal sw=2 ts=2 sts=2

highlight ColorColumn ctermbg=0

" Set line markers to make indentation easier in Mojo templates
" Enable via :call ShowLines()
fun ShowLines()
    if &ft ==# "html" || &ft ==# "html.epl"
        :set colorcolumn=5,9,13,17,21,25,29
    else
        :set colorcolumn=78
    endif
endfun

fun HideLines()
    :set colorcolumn=
endfun

nnoremap <leader>xx :call setfperm(expand('%'),"rwxrw-rw-")<cr>

" Try to install missing Perl modules
nnoremap <leader>l :!perl -Mlazy -c %:p

" Change hyphens to underscores
vnoremap uu :s/\%V\-/_/g<cr>

" Change underscores to hyphens
vnoremap hh :s/\%V_/-/g<cr>
