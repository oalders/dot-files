set encoding=utf-8
scriptencoding utf-8

" vim-polyglot
let g:polyglot_disabled = ['go', 'perl']

source ~/.vim/vim-plug-vimrc

let g:mapleader = ','

syntax enable
set background=dark

colorscheme nord

let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'readonly', 'relativepath', 'modified' ] ]
      \ },
      \ 'colorscheme': 'nord',
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \   'modified': 'LightlineModified',
      \ }
      \ }

function! LightlineModified()
    return &modifiable && &modified ? 'üíæ' : ''
endfunction

" display relative file path rather than just name
" See https://github.com/itchyny/lightline.vim/issues/87#issuecomment-119130738
function! LightlineFilename()
    return expand('%')
endfunction

let g:lightline#ale#indicator_checking = 'üëï'
let g:lightline#ale#indicator_errors = 'üö®'
let g:lightline#ale#indicator_infos = '‚ÑπÔ∏è'
let g:lightline#ale#indicator_ok = 'üÜó'
let g:lightline#ale#indicator_warnings = 'üö´'

let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_infos': 'lightline#ale#infos',
      \  'linter_ok': 'lightline#ale#ok',
      \  'linter_warnings': 'lightline#ale#warnings',
      \ }

let g:lightline.component_type = {
      \     'linter_checking': 'right',
      \     'linter_infos': 'right',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'right',
      \ }

let g:lightline.active = {
      \   'right': [
      \     [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok' ],
      \     [ 'lineinfo' ],
      \     [ 'percent' ],
      \     [ 'fileformat', 'fileencoding', 'filetype']
      \   ]
      \ }


" Ensure bg color for OceanicNext doesn't get clobbered
" https://stackoverflow.com/a/41587510/406224
highlight clear LineNr
highlight clear SignColumn

:nnoremap <leader>sv :source $MYVIMRC<cr>

" Display number of matches for a search, with index. eg: [2/5]
set shortmess-=S

" Don't clobber the Attention message that appears if two processes are trying
" to edit the same file.
set shortmess-=A

" https://superuser.com/questions/1255985/syntax-highlighting-breaks-off-on-vim-as-you-page-up-down-on-osx-terminal-and-i
map ,ss <esc>:syntax sync fromstart<CR>

set laststatus=2
set backspace=2
filetype on

" Prevent vim swap files from being included with important files
set directory=$HOME/.vimtmp

augroup fileops
    " reload files which have changed
    autocmd CursorHold * checktime
augroup END

" paste the same line multiple times without the content of the "yank" being replaced
" http://stackoverflow.com/questions/7163947/vim-paste-multiple-times
xnoremap p pgvy

let g:auto_save = 1  " enable AutoSave on Vim startup

let g:gitgutter_realtime = 0

let g:auto_save_no_updatetime = 1  " do not change the 'updatetime' option

let g:matchmaker_enable_startup = 1

" Don't override iTerm2's window transparency
highlight Normal ctermbg=none

" prevent delay when switching from insert to normal mode
" https://www.johnhawthorn.com/2012/09/vi-escape-delays/
set timeoutlen=1000 ttimeoutlen=1000

set autoread

" ensure long lines get full syntax highlighting
set synmaxcol=2000

" ########### Search ###########
"
" case insensitive search
set ignorecase smartcase

" highlight all matches
set hlsearch

hi Search ctermbg=LightYellow
hi Search ctermfg=Red

" lookahead as search pattern is specified
set incsearch

" ########### Indent ###########

filetype plugin indent on
set autoindent

" enable shift-tab for outdent
exe 'set t_kB=' . nr2char(27) . '[Z'

set softtabstop=4
set shiftwidth=4
set tabstop=4
set smarttab
" use spaces rather than tabs
set expandtab

" Indent using tabs (while in visual mode)
vnoremap < <gv
vnoremap > >gv

" make tab in v mode ident code
vmap <tab> >gv
vmap <s-tab> <gv

" make tab in normal mode indent code
nmap <tab> I<tab><esc>
nmap <s-tab> ^i<bs><esc>

:set list!
:set listchars=tab:\|.

" https://stackoverflow.com/a/69099888/406224
function! UseTabs()
    :set noexpandtab
    :set copyindent
    :set preserveindent
    :set softtabstop=0
    :set shiftwidth=4
    :set tabstop=4
    :set list
endfunction

" ########### TidyAll ###########

" https://github.com/jonswar/perl-code-tidyall/blob/master/etc/editors/tidyall.vim

" Run tidyall on the current buffer. If an error occurs, show it and leave it
" in tidyall.ERR, and undo any changes.

command! TidyAll :call TidyAll()
function! TidyAll()
    let l:cur_pos = getpos( '.' )
    let l:cmdline = ':1,$!tidyall --mode editor --pipe %:p 2> tidyall.ERR'
    execute( l:cmdline )
    if v:shell_error
        echo "\nContents of tidyall.ERR:\n\n" . system( 'cat tidyall.ERR' )
        silent undo
    else
        call system( 'rm tidyall.ERR' )
    endif
    call setpos( '.', cur_pos )
endfunction

" Bind to ,t (or leader+t)
map <leader>t :call TidyAll()<cr>

" Thanks to D. Ben Knoble for getting histadd() to work:
" https://vi.stackexchange.com/questions/34818/how-to-use-histadd-with-a-custom-function/34819#34819
nnoremap <leader>ot :call OT(input("ot: ", "", "file"))<cr>

function! OT(fname)
    let res = system('ot --editor vim --print ' . shellescape(a:fname))
    if v:shell_error
        echo "\n" . res
    else
        execute 'e ' res
    endif
    call histadd(':', printf('call OT("%s")', escape(a:fname, '"\')))
endfunction

" ########### Ale ###########

" statusline error display doesn't seem to work
let g:ale_set_quickfix = 1
let g:ale_open_list = 1

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" gometalinter currently not enabled
let g:ale_linters = {
\   'ansible' : ['ansible-lint'],
\   'go': ['gofmt', 'golangci-lint', 'gopls', 'revive'],
\   'dockerfile': ['hadolint'],
\   'html': ['alex', 'fecs', 'htmlhint', 'stylelint', 'tidy',],
\   'markdown': ['markdownlint', 'write-good'],
\   'perl': ['syntax-check', 'perlcritic'],
\   'rust': ['cargo', 'rls'],
\   'sh': ['language_server','shell', 'shellcheck'],
\   'vim': ['vint'],
\   'yaml': ['yamllint'],
\}

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'css': ['prettier'],
\   'go': ['gofumpt'],
\   'html': ['remove_trailing_lines', 'trim_whitespace', 'prettier'],
\   'java': ['remove_trailing_lines', 'trim_whitespace', 'google_java_format'],
\   'javascript': ['eslint','prettier_eslint', 'remove_trailing_lines'],
\   'json': ['prettier'],
\   'lua': ['luafmt', 'remove_trailing_lines', 'trim_whitespace'],
\   'markdown': ['prettier'],
\   'ruby': ['rubocop'],
\   'rust': ['remove_trailing_lines', 'rustfmt', 'trim_whitespace'],
\   'sh': ['shfmt'],
\   'toml': ['prettier'],
\   'yaml': ['prettier'],
\}

let g:ale_type_map = {
\    'perlcritic': {'ES': 'WS', 'E': 'W'},
\}

" Keep this in its own block as en example of how to add a custom Ale fixer
function! Perlimports(buffer) abort
  write
  return {
  \   'command': 'perlimports --libs dev/lib,lab/lib,lib,t/lib --no-preserve-duplicates --no-preserve-unused --log-filename /tmp/perlimports.txt --log-level debug --read-stdin -f %s'
  \}
endfunction

let ale_fixers.perl = ['perltidy', 'perlimports']
execute ale#fix#registry#Add('perlimports', 'Perlimports', ['perl'], 'Tidy Perl imports')

let g:ale_sh_shellcheck_change_directory = 0
let g:ale_shellcheck_options = '-x'
let g:ale_writegood_options = '--no-passive'
let g:ale_hover_to_floating_preview = 1
let g:ale_floating_preview = 1
let g:ale_floating_window_border = ['‚îÇ', '‚îÄ', '‚ï≠', '‚ïÆ', '‚ïØ', '‚ï∞']

"let g:ale_sign_warning = emoji#for('poop')
"let g:ale_sign_error = emoji#for('bomb')
"highlight clear ALEErrorSign
"highlight clear ALEWarningSign

" define a group `vimrc` and initialize.
augroup vimrc
  autocmd!

    " ########### Set File Types ###########
    "
    autocmd BufEnter .vim-plug-vimrc  :setlocal filetype=vim

    autocmd BufEnter ansible/hosts :setlocal filetype=dosini

    " syntax highlighting for some Perl utility rc files
    autocmd BufEnter  cpanfile        :setlocal filetype=perl
    autocmd BufEnter  dataprinter     :setlocal filetype=dosini
    autocmd BufEnter .dataprinter     :setlocal filetype=dosini
    autocmd BufEnter  perlcriticrc    :setlocal filetype=dosini
    autocmd BufEnter .perlcriticrc    :setlocal filetype=dosini
    autocmd BufEnter .tidyallrc       :setlocal filetype=dosini
    autocmd BufEnter .yath.rc         :setlocal filetype=dosini
    autocmd BufEnter .yath.user.rc    :setlocal filetype=dosini

    autocmd BufRead,BufNewFile *.gohtml   set filetype=gohtmltmpl
    autocmd BufRead,BufNewFile *.html     set filetype=html
    autocmd BufRead,BufNewFile *.html.ep  set filetype=html
    autocmd BufRead,BufNewFile *.html.epl set filetype=html
    autocmd BufRead,BufNewFile *.tmpl     set filetype=html

    autocmd BufRead,BufNewFile *.yml set filetype=yaml
    autocmd FileType yaml :setlocal sw=2 ts=2 sts=2

    autocmd BufRead,BufNewFile bash_profile set filetype=sh
    autocmd BufRead,BufNewFile bashrc set filetype=sh
    autocmd BufRead,BufNewFile local_bashrc set filetype=sh

    autocmd BufRead,BufNewFile Changes set filetype=txt
    autocmd BufRead,BufNewFile *.txt set filetype=txt

    autocmd BufRead,BufNewFile *.pm set filetype=perl
    autocmd vimrc BufRead,BufNewFile *.psgi set filetype=perl
augroup END

" ########### SQL ###########

" prevent left and right arrows from being disabled in insert mode when
" editing SQL files
let g:omni_sql_no_default_maps = 1

highlight ColorColumn ctermbg=0 guibg=lightgrey

" ########### Functions ###########
"
" Exec current file
nnoremap <Leader>e <Esc>:call ExecFile()<CR>

fun ExecFile()
    ":call setfperm(expand("%"), "rwxr-xr-x")
    :silent !chmod u+x %
    :!"%:p"
endfun

" Set visual cue at column 78
:set colorcolumn=78

" Set line markers to make indentation easier to follow
" Enable via :call ShowLines()
fun ShowLines()
    :set colorcolumn=5,9,13,17,21,25,29,78
endfun

fun HideLines()
    :set colorcolumn=78
endfun

fun ClearLines()
    :set colorcolumn=
endfun

fun SudoWrite()
    cmap w!! w !sudo tee % > /dev/null
endfun

fun HideGutter()
    :GitGutterDisable
    :set nonumber
    :set nolist
    :set scl=no " sign column
endfun

fun! ShowGutter()
    :GitGutterEnable
    :set number
    :set list
    :set scl=auto
endfun

fun Requote()
    :%s/[‚Äú‚Äù]/"/g
endfun

" Remove last character from each line
fun Truncate()
    :%s/.$//
endfun

" ########### Mappings ###########
"
nnoremap <leader>xx :call setfperm(expand('%'),"rwxrw-rw-")<cr>

" Change hyphens to underscores
vnoremap <silent> uu :s/\%V\-/_/g<cr>

" Change underscores to hyphens
vnoremap <silent> hh :s/\%V_/-/g<cr>

" Change double quotes to single quotes
vnoremap <silent> '' :s/\%V"/'/g<cr>

" https://github.com/roxma/vim-hug-neovim-rpc/issues/28
set pyxversion=3
let g:python_host_prog = '/usr/bin/python2'
let g:python3_host_prog = '/usr/bin/python3'
let g:deoplete#enable_at_startup = 0
let g:deoplete#auto_complete_start_length = 5

" fzf
nnoremap <leader>f : <C-u>FZF<CR>
let g:fzf_preview_window = ['down:40%', 'ctrl-/', ]
nnoremap <leader>b :Buffers<cr>

"remove all trailing whitespace
:nnoremap <silent> - :FixWhitespace<CR>
:vnoremap <silent> - :FixWhitespace<CR>

"dictionary sort
:vnoremap <silent> so :!sort -d --ignore-case<CR>

"dictionary sort unique
:vnoremap <silent> su :!sort -d --ignore-case<bar> uniq<CR>
" vim-emoji

set completefunc=emoji#complete
"let g:gitgutter_sign_added = emoji#for('plus-sign')
"let g:gitgutter_sign_modified = emoji#for('small_orange_diamond')
"let g:gitgutter_sign_removed = emoji#for('small_red_triangle')
"let g:gitgutter_sign_modified_removed = emoji#for('collision')

" CamelCaseMotion
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge

nmap <leader>h :YankHistoryRgPaste

" Format selected JSON via jq
" The dot is not required for jq version >= 1.6
vnoremap jq :!jq -S .<cr>

" Fix up TeamCity Perl module names into something that looks like a Perl
" module name
map ,tcmod gv:s/\:/::/g<CR>gv:s/\./::/g<CR>

" Example without a preview window:
"command! GEmo
  "\ call fzf#run({'source': 'git diff -w -M origin/main...HEAD --name-only', 'sink': 'e'})

command! -bang GDomo
  \ call fzf#run(
  \   fzf#vim#with_preview(
  \     fzf#wrap({ 'source': 'git domo' }, <bang>0)
  \   )
  \ )

" Show comments in italics
highlight Comment cterm=italic gui=italic term=bold
set t_ZH=[3m
set t_ZR=[23m

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" 'luochen1990/rainbow'
let g:rainbow_active = 1 "set to 0 if you want to enable it later via :RainbowToggle

" vim-slash plugin can force the cursor to blink when it first arrives at a
" match
if has('timers')
  " Blink 2 times with 50ms interval
  noremap <expr> <plug>(slash-after) slash#blink(2, 50)
endif

" insert a new uuid at cursor
let g:nuuid_no_mappings = 1
nnoremap <Leader>u <Plug>Nuuid

" Prevent a mouse selection from triggering visual mode
set mouse=v
