" vim-polyglot
let g:polyglot_disabled = ['go', 'perl']

source ~/.vim/vim-plug-vimrc

let g:mapleader = ","

syntax enable
set background=dark

colorscheme OceanicNext
let g:oceanic_next_terminal_bold = 1
let g:oceanic_next_terminal_italic = 1

let g:airline_theme='oceanicnext'
let g:airline_powerline_fonts = 1

let g:lightline = {
      \ 'colorscheme': 'PaperColor',
      \ }

" Ensure bg color for OceanicNext doesn't get clobbered
" https://stackoverflow.com/a/41587510/406224
highlight clear LineNr
highlight clear SignColumn

" Display number of matches for a search, with index. eg: [2/5]
set shortmess-=S

" Don't clobber the Attention message that appears if two processes are trying
" to edit the same file.
set shortmess-=A

" https://superuser.com/questions/1255985/syntax-highlighting-breaks-off-on-vim-as-you-page-up-down-on-osx-terminal-and-i
map ,ss <esc>:syntax sync fromstart<CR>

set laststatus=2
set backspace=2
filetype on

" Prevent vim swap files from being included with important files
set directory=$HOME/.vimtmp

"====[ Goto last location in non-empty files ]=======

autocmd BufReadPost *  if line("'\"") > 1 && line("'\"") <= line("$")
                   \|     exe "normal! g`\""
                   \|  endif

" paste the same line multiple times without the content of the "yank" being replaced
" http://stackoverflow.com/questions/7163947/vim-paste-multiple-times
xnoremap p pgvy

let g:auto_save = 1  " enable AutoSave on Vim startup

let g:gitgutter_realtime = 0

let g:auto_save_no_updatetime = 1  " do not change the 'updatetime' option

let g:matchmaker_enable_startup = 1

" Don't override iTerm2's window transparency
highlight Normal ctermbg=none

" prevent delay when switching from insert to normal mode
" https://www.johnhawthorn.com/2012/09/vi-escape-delays/
set timeoutlen=1000 ttimeoutlen=1000

" reload files which have changed
:autocmd CursorHold * checktime
set autoread

" ensure long lines get full syntax highlighting
set synmaxcol=2000

" ########### Search ###########
"
" case insensitive search
set ignorecase smartcase

" highlight all matches
set hlsearch

hi Search ctermbg=LightYellow
hi Search ctermfg=Red

" lookahead as search pattern is specified
set incsearch

" ########### Indent ###########

filetype plugin indent on
set autoindent

" enable shift-tab for outdent
exe 'set t_kB=' . nr2char(27) . '[Z'

set softtabstop=4
set shiftwidth=4
set tabstop=4
set smarttab
" use spaces rather than tabs
set expandtab

" Indent using tabs (while in visual mode)
vnoremap < <gv
vnoremap > >gv

" make tab in v mode ident code
vmap <tab> >gv
vmap <s-tab> <gv

" make tab in normal mode indent code
nmap <tab> I<tab><esc>
nmap <s-tab> ^i<bs><esc>

:set list!
:set listchars=tab:\|.

" ########### TidyAll ###########

" https://github.com/jonswar/perl-code-tidyall/blob/master/etc/editors/tidyall.vim

" Run tidyall on the current buffer. If an error occurs, show it and leave it
" in tidyall.ERR, and undo any changes.

command! TidyAll :call TidyAll()
function! TidyAll()
    let l:cur_pos = getpos( '.' )
    let l:cmdline = ':1,$!tidyall --mode editor --pipe %:p 2> tidyall.ERR'
    execute( l:cmdline )
    if v:shell_error
        echo "\nContents of tidyall.ERR:\n\n" . system( 'cat tidyall.ERR' )
        silent undo
    else
        call system( 'rm tidyall.ERR' )
    endif
    call setpos( '.', cur_pos )
endfunction

" Bind to ,t (or leader+t)
map <leader>t :call TidyAll()<cr>

" ########### NERDTree ###########
map <F2> :NERDTreeToggle<CR>

" ########### Airline ###########
" Show open buffers at top.  Disabled by default, but leave this here so I
" don't forget about the setting.
let g:airline#extensions#tabline#enabled = 0

" ########### Ale ###########
" Show Ale warnings and messages in statusline
let g:airline#extensions#ale#enabled = 1

" statusline error display doesn't seem to work
let g:ale_set_quickfix = 1
let g:ale_open_list = 1

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" gometalinter currently not enabled
let g:ale_linters = {
\   'ansible' : ['ansible-lint'],
\   'go': ['gofmt', 'golangci-lint', 'gopls'],
\   'dockerfile': ['hadolint'],
\   'markdown': ['markdownlint', 'write-good'],
\   'perl': ['syntax-check', 'perlcritic'],
\   'sh': ['language_server','shell', 'shellcheck'],
\   'vim': ['vint'],
\   'yaml': ['yamllint'],
\}

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'java': ['remove_trailing_lines', 'trim_whitespace', 'google_java_format'],
\   'javascript': ['eslint'],
\   'json': ['prettier'],
\   'markdown': ['prettier'],
\   'perl': ['perltidy'],
\   'ruby': ['rubocop'],
\   'rust': ['rustfmt'],
\   'sh': ['shfmt'],
\   'toml': ['prettier'],
\   'yaml': ['prettier'],
\}

let g:ale_type_map = {
\    'perlcritic': {'ES': 'WS', 'E': 'W'},
\}

let g:ale_sh_shellcheck_change_directory = 0
let g:ale_shellcheck_options = '-x'
let g:ale_writegood_options = '--no-passive'

"let g:ale_sign_warning = emoji#for('poop')
"let g:ale_sign_error = emoji#for('bomb')
"highlight clear ALEErrorSign
"highlight clear ALEWarningSign

" ########### Set File Types ###########
"
autocmd BufEnter .vim-plug-vimrc  :setlocal filetype=vim

" syntax highlighting for some Perl utility rc files
autocmd BufEnter cpanfile         :setlocal filetype=perl
autocmd BufEnter .perlcriticrc    :setlocal filetype=dosini
autocmd BufEnter .tidyallrc       :setlocal filetype=dosini
autocmd BufEnter .yath.rc         :setlocal filetype=dosini
autocmd BufEnter .yath.user.rc    :setlocal filetype=dosini

" Treat Perl Mojo templates (mostly) like HTML
autocmd BufRead,BufNewFile *.html.ep  set filetype=html
autocmd BufRead,BufNewFile *.html.epl set filetype=html
autocmd BufRead,BufNewFile *.tmpl     set filetype=html

autocmd BufRead,BufNewFile *.yml set filetype=yaml
autocmd FileType yaml :setlocal sw=2 ts=2 sts=2

au BufRead,BufNewFile bash_profile set filetype=sh
au BufRead,BufNewFile bashrc set filetype=sh
au BufRead,BufNewFile local_bashrc set filetype=sh

" ########### SQL ###########

" prevent left and right arrows from being disabled in insert mode when
" editing SQL files
let g:omni_sql_no_default_maps = 1

highlight ColorColumn ctermbg=0 guibg=lightgrey

" ########### Functions ###########
"
" Exec current file
nnoremap <Leader>e <Esc>:call ExecFile()<CR>

fun ExecFile()
    ":call setfperm(expand("%"), "rwxr-xr-x")
    :silent !chmod u+x %
    :!"%:p"
endfun

" Set line markers to make indentation easier in Mojo templates
" Enable via :call ShowLines()
fun ShowLines()
    if &ft ==# "html"
        :set colorcolumn=5,9,13,17,21,25,29
    else
        :set colorcolumn=78
    endif
endfun

fun HideLines()
    :set colorcolumn=
endfun

fun SudoWrite()
    cmap w!! w !sudo tee % > /dev/null
endfun

fun HideGutter()
    :GitGutterDisable
    :set nonumber
    :set nolist
endfun

fun ShowGutter()
    :GitGutterEnable
    :set number
    :set list
endfun

" Remove last character from each line
fun Truncate()
    :%s/.$//
endfun

" ########### Mappings ###########
"
nnoremap <leader>xx :call setfperm(expand('%'),"rwxrw-rw-")<cr>

" Change hyphens to underscores
vnoremap <silent> uu :s/\%V\-/_/g<cr>

" Change underscores to hyphens
vnoremap <silent> hh :s/\%V_/-/g<cr>

" https://github.com/roxma/vim-hug-neovim-rpc/issues/28
set pyxversion=3
let g:python_host_prog = "/usr/bin/python2"
let g:python3_host_prog = "/usr/bin/python3"
let g:deoplete#enable_at_startup = 0
let g:deoplete#auto_complete_start_length = 5

" fzf
nnoremap <leader>f : <C-u>FZF<CR>
let g:fzf_preview_window = ['right:50%', 'ctrl-/']

"remove all trailing whitespace
:nnoremap <silent> - :FixWhitespace<CR>
:vnoremap <silent> - :FixWhitespace<CR>

"dictionary sort
:vnoremap <silent> so :!sort -d --ignore-case<CR>

"dictionary sort unique
:vnoremap <silent> su :!sort -d --ignore-case<bar> uniq<CR>
" vim-emoji

set completefunc=emoji#complete
"let g:gitgutter_sign_added = emoji#for('plus-sign')
"let g:gitgutter_sign_modified = emoji#for('small_orange_diamond')
"let g:gitgutter_sign_removed = emoji#for('small_red_triangle')
"let g:gitgutter_sign_modified_removed = emoji#for('collision')

" CamelCaseMotion
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge

" Format selected JSON via jq
" The dot is not required for jq version >= 1.6
vnoremap jq :!jq -S .<cr>

" Fix up TeamCity Perl module names into something that looks like a Perl
" module name
map ,tcmod gv:s/\:/::/g<CR>gv:s/\./::/g<CR>

" Example without a preview window:
"command! GEmo
  "\ call fzf#run({'source': 'git diff -w -M origin/main...HEAD --name-only', 'sink': 'e'})

command! -bang GDomo
  \ call fzf#run(
  \   fzf#vim#with_preview(
  \     fzf#wrap({ 'source': 'git domo' }, <bang>0)
  \   )
  \ )

" Show comments in italics
highlight Comment cterm=italic gui=italic term=bold
set t_ZH=[3m
set t_ZR=[23m

" 'luochen1990/rainbow'
let g:rainbow_active = 1 "set to 0 if you want to enable it later via :RainbowToggle
