source ~/.vim/vim-plug-vimrc

let g:mapleader = ","

syntax enable
set background=dark
colorscheme solarized

" https://superuser.com/questions/1255985/syntax-highlighting-breaks-off-on-vim-as-you-page-up-down-on-osx-terminal-and-i
map ,ss <esc>:syntax sync fromstart<CR>

set laststatus=2
set backspace=2
filetype on
filetype plugin indent on

" case insensitive search
set ignorecase smartcase

" highlight all matches
set hlsearch

hi Search ctermbg=LightYellow
hi Search ctermfg=Red

" lookahead as search pattern is specified
set incsearch

" indents
set autoindent

" reload files which have changed
:autocmd CursorHold * checktime
set autoread

" ensure long lines get full syntax highlighting
set synmaxcol=2000

"remove all trailing whitespace
:nnoremap <silent> - :FixWhitespace<CR>
:vnoremap <silent> - :FixWhitespace<CR>

"dictionary sort
:vnoremap <silent> so :!sort -d --ignore-case<CR>

"dictionary sort unique
:vnoremap <silent> su :!sort -d --ignore-case<bar> uniq<CR>

"ws shortcut to sort lists of words and move to one line. requires tidying
"after the fact.
" http://stackoverflow.com/questions/1327978/sorting-words-not-lines-in-vim
:vnoremap <silent> ws :!perl -ne '$,=" ";print sort split /\s+/'<CR>

" enables shift-tab for outdent
exe 'set t_kB=' . nr2char(27) . '[Z'

" reflow text
nnoremap Q gqap
vnoremap Q gq

" highlight comments
highlight Comment term=bold ctermfg=white

"====[ Goto last location in non-empty files ]=======

autocmd BufReadPost *  if line("'\"") > 1 && line("'\"") <= line("$")
                   \|     exe "normal! g`\""
                   \|  endif

" paste the same line multiple times without the content of the "yank" being replaced
" http://stackoverflow.com/questions/7163947/vim-paste-multiple-times
xnoremap p pgvy

let g:auto_save = 1  " enable AutoSave on Vim startup

let g:gitgutter_realtime = 0

let g:auto_save_no_updatetime = 1  " do not change the 'updatetime' option

let g:matchmaker_enable_startup = 1

" Don't override iTerm2's window transparency
highlight Normal ctermbg=none

" prevent delay when switching from insert to normal mode
" https://www.johnhawthorn.com/2012/09/vi-escape-delays/
set timeoutlen=1000 ttimeoutlen=1000

" ########### tabs ###########

set softtabstop=4
set shiftwidth=4
set tabstop=4
set smarttab
" use spaces rather than tabs
set expandtab

" Indent using tabs (while in visual mode)
vnoremap < <gv
vnoremap > >gv
" make tab in v mode ident code
vmap <tab> >gv
vmap <s-tab> <gv
" make tab in normal mode ident code
nmap <tab> I<tab><esc>
nmap <s-tab> ^i<bs><esc>

:set list!
:set listchars=tab:\|.
" ########### TidyAll ###########

" https://github.com/jonswar/perl-code-tidyall/blob/master/etc/editors/tidyall.vim

" Run tidyall on the current buffer. If an error occurs, show it and leave it
" in tidyall.ERR, and undo any changes.

command! TidyAll :call TidyAll()
function! TidyAll()
    let l:cur_pos = getpos( '.' )
    let l:cmdline = ':1,$!tidyall --mode editor --pipe %:p 2> tidyall.ERR'
    execute( l:cmdline )
    if v:shell_error
        echo "\nContents of tidyall.ERR:\n\n" . system( 'cat tidyall.ERR' )
        silent undo
    else
        call system( 'rm tidyall.ERR' )
    endif
    call setpos( '.', cur_pos )
endfunction

" Bind to ,t (or leader+t)
map <leader>t :call TidyAll()<cr>

" ########### NERDTree ###########
map <F2> :NERDTreeToggle<CR>

" ########### Airline ###########
" Show open buffers at top.  Disabled by default, but leave this here so I
" don't forget about the setting.
let g:airline#extensions#tabline#enabled = 0

" ########### Ale ###########
" Show Ale warnings and messages in statusline
let g:airline#extensions#ale#enabled = 1

" statusline error display doesn't seem to work
let g:ale_set_quickfix = 1
let g:ale_open_list = 1

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" gometalinter currently not enabled
let g:ale_linters = {
\   'ansible' : ['ansible-lint'],
\   'go': ['gofmt', 'golangci-lint', 'gopls'],
\   'dockerfile': ['hadolint'],
\   'markdown': ['markdownlint'],
\   'perl': ['syntax-check', 'perlcritic'],
\   'sh': ['language-server'],
\   'vim': ['vint'],
\   'yaml': ['yamllint'],
\}

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace',],
\   'javascript': ['eslint'],
\   'json': ['prettier'],
\   'markdown': ['prettier'],
\   'perl': ['perltidy'],
\   'sh': ['shfmt'],
\   'toml': ['prettier'],
\   'yaml': ['prettier'],
\}

let g:ale_type_map = {
\    'perlcritic': {'ES': 'WS', 'E': 'W'},
\}

"let g:ale_sign_warning = emoji#for('poop')
"let g:ale_sign_error = emoji#for('bomb')
"highlight clear ALEErrorSign
"highlight clear ALEWarningSign

autocmd BufEnter .vim-plug-vimrc  :setlocal filetype=vim

" syntax highlighting for some Perl utility rc files
autocmd BufEnter cpanfile         :setlocal filetype=perl
autocmd BufEnter .perlcriticrc    :setlocal filetype=dosini
autocmd BufEnter .tidyallrc       :setlocal filetype=dosini
autocmd BufEnter .yath.rc         :setlocal filetype=dosini
autocmd BufEnter .yath.user.rc    :setlocal filetype=dosini

" vim-polyglot
let g:polyglot_disabled = ['go', 'perl']

" ########### All file Types ###########
"
" Exec current file
nnoremap <Leader>e <Esc>:call ExecFile()<CR>

fun ExecFile()
    ":call setfperm(expand("%"), "rwxr-xr-x")
    :silent !chmod u+x %
    :!"%:p"
endfun

" ########### Perl ###########

" Treat Mojo templates (mostly) like HTML
autocmd FileType html.epl setlocal sw=2 ts=2 sts=2
autocmd FileType html.ep setlocal sw=2 ts=2 sts=2

" ########### SplitJoin ###########

let g:splitjoin_split_mapping = ''
let g:splitjoin_join_mapping = ''

nmap <Leader>j :SplitjoinJoin<cr>
nmap <Leader>s :SplitjoinSplit<cr>

" ########### Python ###########
autocmd FileType python nnoremap <leader>y :0,$!yapf<Cr><C-o>

" ########### SQL ###########
vnoremap <silent> + :!sql-webformat<CR>

" prevent left and right arrows from being disabled in insert mode when
" editing SQL files
let g:omni_sql_no_default_maps = 1

" ########### HTML ###########
autocmd BufRead,BufNewFile *.tmpl set filetype=html

" ########### YAML ###########

autocmd BufRead,BufNewFile *.yml set filetype=yaml
autocmd FileType yaml :setlocal sw=2 ts=2 sts=2

highlight ColorColumn ctermbg=0

" Set line markers to make indentation easier in Mojo templates
" Enable via :call ShowLines()
fun ShowLines()
    if &ft ==# "html" || &ft ==# "html.epl"
        :set colorcolumn=5,9,13,17,21,25,29
    else
        :set colorcolumn=78
    endif
endfun

fun HideLines()
    :set colorcolumn=
endfun

fun SudoWrite()
    cmap w!! w !sudo tee % > /dev/null
endfun

fun HideGutter()
    :GitGutterDisable
    :set nonumber
    :set nolist
endfun

fun ShowGutter()
    :GitGutterEnable
    :set number
    :set list
endfun

" Remove last character from each line
fun Truncate()
    :%s/.$//
endfun

nnoremap <leader>xx :call setfperm(expand('%'),"rwxrw-rw-")<cr>

" Change hyphens to underscores
vnoremap <silent> uu :s/\%V\-/_/g<cr>

" Change underscores to hyphens
vnoremap <silent> hh :s/\%V_/-/g<cr>

" maybe this should live in ~/.vim/ftdetect/bash_profile.vim
au BufRead,BufNewFile bash_profile set filetype=sh
au BufRead,BufNewFile local_bashrc set filetype=sh

" https://github.com/roxma/vim-hug-neovim-rpc/issues/28
set pyxversion=3
let g:python_host_prog = "/usr/bin/python2"
let g:python3_host_prog = "/usr/bin/python3"
let g:deoplete#enable_at_startup = 0
let g:deoplete#auto_complete_start_length = 5

" fzf
nnoremap <leader>f : <C-u>FZF<CR>

" vim-emoji

set completefunc=emoji#complete
"let g:gitgutter_sign_added = emoji#for('plus-sign')
"let g:gitgutter_sign_modified = emoji#for('small_orange_diamond')
"let g:gitgutter_sign_removed = emoji#for('small_red_triangle')
"let g:gitgutter_sign_modified_removed = emoji#for('collision')
